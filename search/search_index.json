{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Source Code Documentation with mkdocs / mkdocstrings About In this project you will learn mkdocs to publish the source code and docstrings of your software as website. Documentation is an essential part of any project you work on, irrespective of the programming language you use. Better documentation will make your project more successful because you know that when you share the project or the software. MkDocs MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Example Docs Site Gitlab https://yuyatinnefeld.gitlab.io/mkdocs-gitlab-github/ Github https://yuyatinnefeld.github.io/mkdocs-gitlab-github/ Setup Mkdocs Environment # install mkdocs and project relevant python packages pip install -r requirements.txt # create mkdocs files mkdocs new . # edit mkdocs file vi ./mkdocs.yml # edit docs/index.md vi docs/index.md # create a python script which generates the markdown files and nav automatically # source: https://github.com/oprypin/mkdocs-gen-files touch docs/gen_mkdocs_pages.py Start MkDocs # see the documenation mkdocs serve # build mkcods file mkdocs build # verify ls public # deploy your documentation thought the Gitlab CICD Pipeline git push origin master Gitlab Docs Site # check the page <username>.<gitlab>.io/<your-mkdocs-repo> # example gitlab site https://yuyatinnefeld.gitlab.io/mkdocs-gitlab-github # details about gitlab url https://docs.gitlab.com/ee/user/project/pages/getting_started_part_one.html Github Docs Site # setup gh-pages branch as source repo > settings > pages Source: Deploy from a branch Branch: gh-pages + Selectfolder: root > Save # check the page <username>.<github>.io/<your-mkdocs-repo> # example gitlab site https://yuyatinnefeld.github.io/mkdocs-gitlab-github","title":"Python Source Code Documentation with mkdocs / mkdocstrings"},{"location":"#python-source-code-documentation-with-mkdocs-mkdocstrings","text":"","title":"Python Source Code Documentation with mkdocs / mkdocstrings"},{"location":"#about","text":"In this project you will learn mkdocs to publish the source code and docstrings of your software as website. Documentation is an essential part of any project you work on, irrespective of the programming language you use. Better documentation will make your project more successful because you know that when you share the project or the software.","title":"About"},{"location":"#mkdocs","text":"MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.","title":"MkDocs"},{"location":"#example-docs-site","text":"","title":"Example Docs Site"},{"location":"#gitlab","text":"https://yuyatinnefeld.gitlab.io/mkdocs-gitlab-github/","title":"Gitlab"},{"location":"#github","text":"https://yuyatinnefeld.github.io/mkdocs-gitlab-github/","title":"Github"},{"location":"#setup-mkdocs-environment","text":"# install mkdocs and project relevant python packages pip install -r requirements.txt # create mkdocs files mkdocs new . # edit mkdocs file vi ./mkdocs.yml # edit docs/index.md vi docs/index.md # create a python script which generates the markdown files and nav automatically # source: https://github.com/oprypin/mkdocs-gen-files touch docs/gen_mkdocs_pages.py","title":"Setup Mkdocs Environment"},{"location":"#start-mkdocs","text":"# see the documenation mkdocs serve # build mkcods file mkdocs build # verify ls public # deploy your documentation thought the Gitlab CICD Pipeline git push origin master","title":"Start MkDocs"},{"location":"#gitlab-docs-site","text":"# check the page <username>.<gitlab>.io/<your-mkdocs-repo> # example gitlab site https://yuyatinnefeld.gitlab.io/mkdocs-gitlab-github # details about gitlab url https://docs.gitlab.com/ee/user/project/pages/getting_started_part_one.html","title":"Gitlab Docs Site"},{"location":"#github-docs-site","text":"# setup gh-pages branch as source repo > settings > pages Source: Deploy from a branch Branch: gh-pages + Selectfolder: root > Save # check the page <username>.<github>.io/<your-mkdocs-repo> # example gitlab site https://yuyatinnefeld.github.io/mkdocs-gitlab-github","title":"Github Docs Site"},{"location":"docs/app/main/","text":"src.app.main.py Example Google style docstrings. This module demonstrates documentation as specified by the Google Python Style Guide _. Docstrings may extend over multiple lines. Sections are created with a section header and a colon followed by a block of indented text. Example Examples can be given using either the Example or Examples sections. Sections support any reStructuredText formatting, including literal blocks:: $ python example_google.py Section breaks are created by resuming unindented text. Section breaks are also implicitly created anytime a new section starts. Attributes: Name Type Description module_level_variable1 int Module level variables may be documented in either the Attributes section of the module docstring, or in an inline docstring immediately following the variable. Either form is acceptable, but the two should not be mixed. Choose one convention to document module level variables and be consistent with it. Todo For module TODOs You have to also use sphinx.ext.todo extension .. _Google Python Style Guide: http://google.github.io/styleguide/pyguide.html","title":"src.app.main.py"},{"location":"docs/app/main/#srcappmainpy","text":"Example Google style docstrings. This module demonstrates documentation as specified by the Google Python Style Guide _. Docstrings may extend over multiple lines. Sections are created with a section header and a colon followed by a block of indented text. Example Examples can be given using either the Example or Examples sections. Sections support any reStructuredText formatting, including literal blocks:: $ python example_google.py Section breaks are created by resuming unindented text. Section breaks are also implicitly created anytime a new section starts. Attributes: Name Type Description module_level_variable1 int Module level variables may be documented in either the Attributes section of the module docstring, or in an inline docstring immediately following the variable. Either form is acceptable, but the two should not be mixed. Choose one convention to document module level variables and be consistent with it. Todo For module TODOs You have to also use sphinx.ext.todo extension .. _Google Python Style Guide: http://google.github.io/styleguide/pyguide.html","title":"src.app.main.py"},{"location":"docs/app/utils/","text":"src.app.utils.py function_with_types_in_docstring ( param1 , param2 ) Example function with types documented in the docstring. PEP 484 type annotations are supported. If attribute, parameter, and return types are annotated according to PEP 484 , they do not need to be included in the docstring: Parameters: Name Type Description Default param1 int The first parameter. required param2 str The second parameter. required Returns: Name Type Description bool The return value. True for success, False otherwise. .. _PEP 484: https://www.python.org/dev/peps/pep-0484/ Source code in src/app/utils.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def function_with_types_in_docstring ( param1 , param2 ): \"\"\"Example function with types documented in the docstring. `PEP 484`_ type annotations are supported. If attribute, parameter, and return types are annotated according to `PEP 484`_, they do not need to be included in the docstring: Args: param1 (int): The first parameter. param2 (str): The second parameter. Returns: bool: The return value. True for success, False otherwise. .. _PEP 484: https://www.python.org/dev/peps/pep-0484/ \"\"\" utils_func_1 ( name ) Utils Function 1 name (str): The name of the person to greet. Source code in src/app/utils.py 1 2 3 4 5 6 7 def utils_func_1 ( name ): \"\"\"Utils Function 1 Args: name (str): The name of the person to greet. \"\"\" print ( f \"Hello { name } !\" ) utils_func_2 ( name , password ) Utils Function 2 name (str): The name of the person to greet. password (str): The password of the person to greet. Source code in src/app/utils.py 10 11 12 13 14 15 16 17 def utils_func_2 ( name , password ): \"\"\"Utils Function 2 Args: name (str): The name of the person to greet. password (str): The password of the person to greet. \"\"\" print ( f \"Hello { name } !\" )","title":"src.app.utils.py"},{"location":"docs/app/utils/#srcapputilspy","text":"","title":"src.app.utils.py"},{"location":"docs/app/utils/#src.app.utils.function_with_types_in_docstring","text":"Example function with types documented in the docstring. PEP 484 type annotations are supported. If attribute, parameter, and return types are annotated according to PEP 484 , they do not need to be included in the docstring: Parameters: Name Type Description Default param1 int The first parameter. required param2 str The second parameter. required Returns: Name Type Description bool The return value. True for success, False otherwise. .. _PEP 484: https://www.python.org/dev/peps/pep-0484/ Source code in src/app/utils.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def function_with_types_in_docstring ( param1 , param2 ): \"\"\"Example function with types documented in the docstring. `PEP 484`_ type annotations are supported. If attribute, parameter, and return types are annotated according to `PEP 484`_, they do not need to be included in the docstring: Args: param1 (int): The first parameter. param2 (str): The second parameter. Returns: bool: The return value. True for success, False otherwise. .. _PEP 484: https://www.python.org/dev/peps/pep-0484/ \"\"\"","title":"function_with_types_in_docstring()"},{"location":"docs/app/utils/#src.app.utils.utils_func_1","text":"Utils Function 1 name (str): The name of the person to greet. Source code in src/app/utils.py 1 2 3 4 5 6 7 def utils_func_1 ( name ): \"\"\"Utils Function 1 Args: name (str): The name of the person to greet. \"\"\" print ( f \"Hello { name } !\" )","title":"utils_func_1()"},{"location":"docs/app/utils/#src.app.utils.utils_func_2","text":"Utils Function 2 name (str): The name of the person to greet. password (str): The password of the person to greet. Source code in src/app/utils.py 10 11 12 13 14 15 16 17 def utils_func_2 ( name , password ): \"\"\"Utils Function 2 Args: name (str): The name of the person to greet. password (str): The password of the person to greet. \"\"\" print ( f \"Hello { name } !\" )","title":"utils_func_2()"},{"location":"docs/app_2/main/","text":"src.app_2.main.py Example Google style docstrings my_custom_func ( param1 , param2 ) Example function with types documented in the docstring. PEP 484 type annotations are supported. If attribute, parameter, and return types are annotated according to PEP 484 , they do not need to be included in the docstring: Parameters: Name Type Description Default param1 int The first parameter. required param2 str The second parameter. required Returns: Name Type Description bool The return value. True for success, False otherwise. .. _PEP 484: https://www.python.org/dev/peps/pep-0484/ Source code in src/app_2/main.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def my_custom_func ( param1 , param2 ): \"\"\"Example function with types documented in the docstring. `PEP 484`_ type annotations are supported. If attribute, parameter, and return types are annotated according to `PEP 484`_, they do not need to be included in the docstring: Args: param1 (int): The first parameter. param2 (str): The second parameter. Returns: bool: The return value. True for success, False otherwise. .. _PEP 484: https://www.python.org/dev/peps/pep-0484/ \"\"\" print ( \"hello world\" )","title":"src.app_2.main.py"},{"location":"docs/app_2/main/#srcapp_2mainpy","text":"Example Google style docstrings","title":"src.app_2.main.py"},{"location":"docs/app_2/main/#src.app_2.main.my_custom_func","text":"Example function with types documented in the docstring. PEP 484 type annotations are supported. If attribute, parameter, and return types are annotated according to PEP 484 , they do not need to be included in the docstring: Parameters: Name Type Description Default param1 int The first parameter. required param2 str The second parameter. required Returns: Name Type Description bool The return value. True for success, False otherwise. .. _PEP 484: https://www.python.org/dev/peps/pep-0484/ Source code in src/app_2/main.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 def my_custom_func ( param1 , param2 ): \"\"\"Example function with types documented in the docstring. `PEP 484`_ type annotations are supported. If attribute, parameter, and return types are annotated according to `PEP 484`_, they do not need to be included in the docstring: Args: param1 (int): The first parameter. param2 (str): The second parameter. Returns: bool: The return value. True for success, False otherwise. .. _PEP 484: https://www.python.org/dev/peps/pep-0484/ \"\"\" print ( \"hello world\" )","title":"my_custom_func()"},{"location":"docs/datalayer/checkout_button/","text":"src.datalayer.checkout_button.py checkout_button () Checkout Button DataLayer Returns: Name Type Description checkout_button_dl json This is Checkout Button DataLayer Object Source code in src/datalayer/checkout_button.py 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def checkout_button (): \"\"\" Checkout Button DataLayer Returns: checkout_button_dl (json): This is Checkout Button DataLayer Object \"\"\" checkout_button_dl = { event : \"checkout_button\" , gtm : { uniqueEventId : 2 , start : 1639524976560 , scrollThreshold : 90 , scrollUnits : \"percent\" , scrollDirection : \"vertical\" , triggers : \"1_27\" }, value : \"120\" } return checkout_button_dl","title":"src.datalayer.checkout_button.py"},{"location":"docs/datalayer/checkout_button/#srcdatalayercheckout_buttonpy","text":"","title":"src.datalayer.checkout_button.py"},{"location":"docs/datalayer/checkout_button/#src.datalayer.checkout_button.checkout_button","text":"Checkout Button DataLayer Returns: Name Type Description checkout_button_dl json This is Checkout Button DataLayer Object Source code in src/datalayer/checkout_button.py 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 def checkout_button (): \"\"\" Checkout Button DataLayer Returns: checkout_button_dl (json): This is Checkout Button DataLayer Object \"\"\" checkout_button_dl = { event : \"checkout_button\" , gtm : { uniqueEventId : 2 , start : 1639524976560 , scrollThreshold : 90 , scrollUnits : \"percent\" , scrollDirection : \"vertical\" , triggers : \"1_27\" }, value : \"120\" } return checkout_button_dl","title":"checkout_button()"}]}